# Makefile for ClasTool

SHELL := /bin/bash

ifndef CLASTOOL
$(error "Please set the variable CLASTOOL. Usualy setenv CLASTOOL `pwd` does the trick.")
endif

ifndef OS_NAME
$(error "Please set the variable OS_NAME to your OS. The command: setenv OS_NAME `uname` should do.")
endif

# I just commented this for no compiling reason at all. It slowed down TAB
# completion for make command in Bash shell, and I don't like that
# Find MySQL
#ifeq "$(MYSQL_INCLUDE)" ""
#MYSQL_INCLUDE := $(shell $(CLASTOOL)/scripts/find_mysql -i)
#endif
#ifeq "$(MYSQL_LIB)" ""	
#MYSQL_LIB     := $(shell $(CLASTOOL)/scripts/find_mysql -l)
#endif

ROOTCFLAGS  := $(shell root-config --cflags)
ROOTLDFLAGS := $(shell root-config --ldflags)
ROOTLIBS    := $(shell root-config --libs) -lEG
ROOTGLIBS   := $(shell root-config --glibs)
ROOTVERSION := $(shell root-config --version)
ROOTBINDIR  := $(shell root-config --bindir)
ROOTINCDIR  := $(shell root-config --incdir)
ROOTLIBDIR  := $(shell root-config --libdir)

 
ifeq "$(DEBUG)" ""
CXXFLAGS += -O2 
else
CXXFLAGS += -g
endif

ifeq ($(OS_NAME),SunOS)
CXX       := CC
CXXFLAGS  += -KPIC $(ROOTCFLAGS)
LD        := CC
LDFLAGS   := $(ROOTLDFLAGS)
SOFLAGS   := -G
BOSLIB    += -lnsl
ObjSuf    := o
SrcSuf    := cc
ExeSuf    :=
DllSuf    := so
OutPutOpt := -o
endif

ifeq ($(findstring Linux,$(OS_NAME)),Linux)
CXX       := g++
CXXFLAGS  += -Wall -fPIC $(ROOTCFLAGS)
LD        := g++
LDFLAGS   := $(ROOTLDFLAGS)
SOFLAGS   := -Wl,-soname,$$(notdir $$@) -shared
ObjSuf    := o
SrcSuf    := cc
ExeSuf    :=
DllSuf    := so
OutPutOpt := -o
endif

ifeq ($(findstring Darwin,$(OS_NAME)),Darwin)
CXX       := g++
CXXFLAGS  += -Wall -fPIC $(ROOTCFLAGS)
LD        := g++
LDFLAGS   := $(ROOTLDFLAGS)
SOFLAGS   := -O2 -dynamiclib -single_module -undefined dynamic_lookup -install_name $$@ 
ObjSuf    := o
SrcSuf    := cc
ExeSuf    :=
DllSuf    := dylib
OutPutOpt := -o
POST_LINK_COMMAND := ln -fs $(CLASTOOL)/$$(@) $(CLASTOOL)/$$(subst .dylib,.so,$$(@))
endif


#####################################################################
# If root is compiled with m64 flag the ROOTCFLAG returns
# this flag compile time. And when this flag is not present
# in the Linking stage MAC-OS returns "wrong architecture" warning
# This flag does not affect Linux Linking. 
#####################################################################
ifeq ($(findstring m64,$(ROOTCFLAGS)),m64)
LDFLAGS += -m64
endif
