# AUTOMATIC GENERATION OF RULES AND DEPENDENCIES

##############################################################################

# The name of the module when the file module.mk in that directory is included.
# It avoids writing the name of the directory in every file module.mk.

module = $(patsubst %/module.mk,%,\
	 $(word \
	 $(words $(MAKEFILE_LIST)), $(MAKEFILE_LIST)))

##############################################################################

# Create the dependency list of the given source file. If source is TXXXX.cc,
# then its dependencies are in $(DEPDIR)/TXXXX.d. This is for efficiency
# reasons. If each source file has its own dependency file, instead of one big
# dependency file for all sources in the directory, then only the changed
# source file is scanned in order to update its dependencies. Using one file
# for all the sources files would re-scan every one of them to re-build the
# dependencies and doing so is quite inefficient.
# 
# Only the ClasTool Package include files are considered as dependencies.
#
# This advanced auto-dependency generation was invented by Tom Tromey. A good
# explanation can be found in http://make.paulandlesley.org/autodep.html
# 
# You do not have to do ^make depend' anymore.

# $(call make-depend, module, source-file, dependency-file)
define make-depend
	@cat /dev/null > $1/$(DEPDIR)/$3
	@makedepend -f $1/$(DEPDIR)/$3 -w 156 -Y -- $(INCLUDES) -- $1/$2 >& /dev/null
	@sed -e 's@\w*/\(\w*\.h\)@\1@g'                                      \
		-e 's@$1/@&$(OBJDIR)/@'                                      \
		-e '/#.*/d'                                                  \
		-e '/^$$$$/d' $1/$(DEPDIR)/$3 > $1/$(DEPDIR)/$3.bak
	@sed -e 's/^[^:]*: *//'                                              \
		-e 's/ *\\$$$$//'                                            \
		-e 's/$$$$/:/' $1/$(DEPDIR)/$3.bak >> $1/$(DEPDIR)/$3.bak
	@mv $1/$(DEPDIR)/$3.bak $1/$(DEPDIR)/$3
endef

##############################################################################

# Return a list of the object files that should be exist in the given module.
# The names include the full path: module/object-dir/object

# $(call obj-list, module, source-list)
define obj-list
$(patsubst $1/%.cc,$1/$(OBJDIR)/%.o,$2)
endef

##############################################################################

# Return a list of the dictionary object files that should be exist in the
# given module. The names include the full path:
# module/object-dir/dictionary-object

# $(call dict-obj, module, source-class-list)
define dict-obj-list
$(patsubst $1/%.cc,$1/$(OBJDIR)/%Dict.o,$2)
endef

##############################################################################

# Return a list of the dictionary files that should be exist in the given
# module. The names include the full path: module/dictionary-dir/dictionary

#$(call dict-lis, module, source-class-list)
define dict-list
$(patsubst $1/%.cc,$1/$(DICTDIR)/%Dict.cc,$2)
endef

##############################################################################

# Return a list of the dependency files that should be exist in the given
# module. The names include the full path: module/dependency-dir/dependency

# $(call dep-list, module, source-list)
define dep-list
$(patsubst $1/%.cc,$1/$(DEPDIR)/%.d,$2)
endef

##############################################################################

# Create a set of specific targets and rules for the given module.
#
# If make is called with the module as target, i.e., `make module', then the
# shared library is built by default. The target `shlib_module' also does that.
# For building the module static library, the `lib_module' target should be
# used.
# 
# Before compiling and linking the objects, the existence of the dictionary,
# dependency and object directories is checked. If they do not exist, then they
# are created. This is done using the directories as dependencies of the phony
# targets. Again, this is more efficient than checking the directories every
# time a file is compiled.
#
# Finally, a few rules for cleaning the individual module are provided.

# $(call make-module, module, lib-name, lib-deps)
define make-module
# If the module (directory) name is not equal to the library name
ifneq ($1,$2)
.PHONY: $2 shlib_$1 lib_$1
$1: $2
shlib_$1: shlib_$2
lib_$1: lib_$2
clean_$1: clean_$2
shlib_clean_$1: shlib_clean_$2
lib_clean_$1: lib_clean_$2
distclean_$1: distclean_$2
endif

# If make is called whit the target for one specific module, then the LIBDIR
# directory's existence should be checked
ifneq (,$(filter $1 $2 shlib_$2 lib_$2,$(MAKECMDGOALS)))
shlib_$2: $(SLIBDIR)
lib_$2: $(LIBDIR)
endif

# By default the module builds the shared library
$2: shlib_$2

lib_$2: dirs_$1 $(LIBDIR)/lib$2.a

shlib_$2: $3 dirs_$1 $(SLIBDIR)/lib$2.$(DllSuf)


.PHONY: sh_lib_$1 lib_$1 dirs_$1 \
	clean_$1 lib_clean_$1 shlib_clean_$1 distclean_$1

dirs_$1: $1/$(OBJDIR) $1/$(DICTDIR) $1/$(DEPDIR)

$1/$(OBJDIR) $1/$(DICTDIR) $1/$(DEPDIR):
	@mkdir -p $$@

clean_$2:
	@rm -rf $1/$(subst /$(OS_NAME),,$(OBJDIR))  \
	       $1/$(subst /$(OS_NAME),,$(DICTDIR))

lib_clean_$2:
	@rm -f $(LIBDIR)/lib$2.a

shlib_clean_$2:
	@rm -f $(SLIBDIR)/lib$2.$(DllSuf)

distclean_$2: clean_$2 shlib_clean_$2 lib_clean_$2
	@rm -rf $1/$(subst /$(OS_NAME),,$(DEPDIR))
endef

##############################################################################

# Creates the targets and rules for building the module libraries.

# $(call make-libs, module, lib-name, lib-deps, class-list, file-list, other-libs, [override-ld])
define make-libs
SOURCES_DEPS  += $(call dep-list,$(1),$(4) $(5))
SOURCES_DICTS += $(call dict-list,$(1),$(4))

$(SLIBDIR)/lib$(2).$(DllSuf): $(call obj-list,$(1),$(4) $(5)) $(call dict-obj-list,$(1),$(4))
	@echo CREATING SHARED LIBRARY $$@
ifeq (,$(7))
	$(LD) $(SOFLAGS) $(LDFLAGS) -o $$@ $$^ $(6) $(if $3,-L$(SLIBDIR) $(addprefix -l,$3))
else
	$(7) $(SOFLAGS) $(LDFLAGS) -o $$@ $$^ $(6) $(if $3,-L$(SLIBDIR) $(addprefix -l,$3))
endif
	$(POST_LINK_COMMAND)


$(LIBDIR)/lib$(2).a: $(call obj-list,$(1),$(4) $(5)) $(call dict-obj-list,$(1),$(4))
	@echo CREATING LIBRARY $$@
	ar r $$@ $$^
endef

##############################################################################

# Implicit rules for building objects used by shared libraries

# $(call make-objs, module, extra-flags)
define make-objs

# Dictionary source
$1/$(DICTDIR)/%Dict.cc: $1/%.h
ifneq (,$(filter %.o,$(MAKECMDGOALS)))
	@test -d $1/$(DICTDIR) || mkdir -p $1/$(DICTDIR)	
endif
	@echo CREATING DICT $$@
	rootcint -f $$@ -c -p $(INCLUDES) $2 $$(<F) $$(<F:.h=LinkDef.h)

# Dictionary object
$1/$(OBJDIR)/%Dict.o: $1/$(DICTDIR)/%Dict.cc
ifneq (,$(filter %.o,$(MAKECMDGOALS)))
	@test -d $1/$(OBJDIR) || mkdir -p $1/$(OBJDIR)	
endif
	@echo COMPILING DICT $$<
	$(CXX) $(CXXFLAGS) $(INCLUDES) $2 -c $$< -o $$@

# Class object
$1/$(OBJDIR)/%.o: $1/%.cc %.h
ifneq (,$(filter %.o,$(MAKECMDGOALS)))
	@test -d $1/$(DEPDIR) || mkdir -p $1/$(DEPDIR)	
	@test -d $1/$(OBJDIR) || mkdir -p $1/$(OBJDIR)	
endif
	@echo COMPILING CLASS $$<
	@$(call make-depend,$1,$$(<F),$$(<F:.cc=.d))
	$(CXX) $(CXXFLAGS) $(INCLUDES) $2 -c $$< -o $$@

# Non-class object (no dictionary generated)
$1/$(OBJDIR)/%.o: $1/%.cc
ifneq (,$(filter %.o,$(MAKECMDGOALS)))
	@test -d $1/$(DEPDIR) || mkdir -p $1/$(DEPDIR)	
	@test -d $1/$(OBJDIR) || mkdir -p $1/$(OBJDIR)	
endif
	@echo COMPILING FILE $$<
	@$(call make-depend,$1,$$(<F),$$(<F:.cc=.d))
	$(CXX) $(CXXFLAGS) $(INCLUDES) $2 -c $$< -o $$@
endef

##############################################################################

# Targets and rules to build executable files

# $(call make-exe, module, exe-name, lib-deps, file-list, other-libs, extra-flags)
define make-exe
SOURCES_DEPS  += $(call dep-list,$1,$4)

.PHONY: $2

$1: $2

$2: $3 dirs_$1 $(BINDIR)/$2

# Executable target
$(BINDIR)/$2: $(call obj-list,$1,$4)
ifneq (,$(filter exe_,$(MAKECMDGOALS)))
	@test -d $(BINDIR) || mkdir -p $(BINDIR)	
endif
	@echo CREATING EXECUTABLE $$@
	$(LD) $(LDFLAGS) -o $$@ $$^ $5 $(if $3,-L$(SLIBDIR) $(addprefix -l,$3))

# Non-class object implicit rule (no dictionary generated)
$1/$(OBJDIR)/%.o: $1/%.cc
ifneq (,$(filter %.o,$(MAKECMDGOALS)))
	@test -d $1/$(DEPDIR) || mkdir -p $1/$(DEPDIR)	
	@test -d $1/$(OBJDIR) || mkdir -p $1/$(OBJDIR)	
endif
	@echo COMPILING FILE $$<
	@$(call make-depend,$1,$$(<F),$$(<F:.cc=.d))
	$(CXX) $(CXXFLAGS) $(INCLUDES) $6 -c $$< -o $$@
endef
